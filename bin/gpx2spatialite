#!/usr/bin/env python
#-*- coding:utf-8 -*-
"""
Started Tue 12 Feb 2013 21:48:02 CET

Using Tomo Krajina's gpx module, import a file record, trackpoints and
tracklines to a database (SQL for database below)

Copyright 2013 Daniel Belasco Rogers <http://planbperformance.net/dan>
               Peter Vasil <mail@petervasil.net>

To create a suitable database:
In spatialite-gui, click on 'Create a New (empty) SQLite DB' (second tool
item).

To prepare the tables needed for this script (populating the users table
with a username, run the SQL file extras/create_db.sql (i.e.
open it in spatialite-gui with 'Execute SQL script'()).

The script extras/drop_db.sql could be useful too - it drops all the
tables in the database so you can start from scratch.
"""

# standard imports
import sys
from datetime import datetime
try:
    from pyspatialite import dbapi2 as spatialite
except ImportError:
    print("Please install pyspatialite")
    sys.exit(2)
import gpx2spatialite as g2s


def main():
    """
    you know what 'main' does - run everything in the right order and
    print helpful messages to stdout
    """
    # for timing (rough)
    starttime = datetime.now()

    filepaths, username, dbpath, skip_locs, update_locs = g2s.parseargs()

    conn = spatialite.connect(dbpath)
    cursor = conn.cursor()

    if update_locs is True:
        g2s.update_locations(conn)
        sys.exit(0)

    gpx_filepaths = g2s.read_filepaths(filepaths, ".gpx")
    print "\nFound %i .gpx files.\n" % len(gpx_filepaths)

    userid = g2s.get_user_id(cursor, username)
    if userid == -1:
        # user name is not in database - ask to add
        if g2s.checkadd(username):
            print "User %s sucessfully added to database" % username
            userid = g2s.insert_user(cursor, username)
            conn.commit()
        else:
            print "Please run again specifying a known user:"
            cursor.close()
            conn.close()
            sys.exit(0)

    for filepath in gpx_filepaths:
        if g2s.check_if_gpxfile_exists(cursor, filepath) is True:
            print "File %s already in database" % filepath
            continue

        parsing_starttimep = datetime.now()
        print "#" * 48
        print "Parsing points in %s" % filepath
        trkpts, trklines, firsttimestamp, lasttimestamp, wpts = g2s.extractpoints(
            filepath, cursor, skip_locs, False
        )

        dbg_str = "File first timestamp: %s, " % firsttimestamp
        dbg_str += "last timestamp: %s" % lasttimestamp
        print dbg_str

        if firsttimestamp == 0 or lasttimestamp == 0:
            continue
            print "Skipping importing %s." % filepath

        parsing_endtime = datetime.now()
        dbg_str = "\nParsing %d points and %d waypoints " % (len(trkpts),
                                                             len(wpts))
        dbg_str += "from gpx file took %s" % (parsing_endtime -
                                              parsing_starttimep)
        print dbg_str

        db_starttime = datetime.now()
        # print "Entering file into database"
        g2s.enterfile(filepath, cursor, userid, firsttimestamp, lasttimestamp)

        file_uid = g2s.getcurrentfileid(cursor)

        # print "Entering points into database"
        g2s.enterpoints(cursor, userid, trkpts, file_uid)

        # print "Entering lines into database"
        g2s.enterlines(cursor, userid, trklines, file_uid)

        # print entering waypoints into database
        g2s.enterwaypoints(cursor, userid, wpts, file_uid)

        conn.commit()

        db_endtime = datetime.now()
        print "Entering into database took %s" % (db_endtime - db_starttime)

    cursor.close()
    conn.close()

    endtime = datetime.now()
    print "#" * 48
    print "Script took %s\n" % (endtime - starttime)

if __name__ == '__main__':
    sys.exit(main())
